import os
from PIL import Image
from torch.utils import data
import numpy as np
from torchvision import transforms
import torch

root = './data/train/'

class Mydataset(data.Dataset):
    def __init__(self,root,datatxt,transform=None,target_transform=None):
        super(Mydataset,self).__init__()
        fh = open(root+datatxt,'r')
        imgs = []
        for line in fh:
            line = line.rstrip()
            words = line.split()
            imgs.append((words[0],int(words[1])))

        self.imgs = imgs
        self.transform = transform
        self.target_transform = target_transform

    def __getitem__(self, index):
        fn,label = self.imgs[index]
        img = Image.open(root+fn).convert('RGB')

        if self.transform is not None:
            img = self.transform(img)
        return img,label

    def __len__(self):
        return len(self.imgs)

train_data = Mydataset(root=root,datatxt='train.txt',transform=transforms.ToTensor)
train_loader = data.DataLoader(dataset=train_data,batch_size=64,shuffle=True)
print(train_loader)


# I have some questions  每次train_data是读取一条信息么？？ 
