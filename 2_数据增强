from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array,load_img  
import numpy as np  

datagen = ImageDataGenerator(  
    rotation_range=40,  
    width_shift_range=0.2,  
    height_shift_range=0.2,  
    rescale=1/255,  
    shear_range=0.2,  
    zoom_range=0.2,  
    horizontal_flip=True,  
    fill_mode='nearest'  
)  
img = load_img("train/cat/cat.0.jpg")  
x = img_to_array(img)  
print(x.shape)  
x = np.expand_dims(x, 0)  
print(x.shape)  
  
i = 0  
for batch in datagen.flow(x, batch_size=1 ,save_to_dir='temp', save_prefix='new_cat', save_format='jpeg'):  
    i+=1  
    if i==20:  
        break  
print('finished')  


# 数据增强

 
from keras.models import Sequential  
from keras.layers import Conv2D,MaxPool2D,Activation,Dropout,Flatten,Dense  
from keras.optimizers import Adam  
from keras.preprocessing.image import ImageDataGenerator,img_to_array,load_img  
  
model = Sequential()  
model.add(Conv2D(input_shape=(150, 150, 3), filters=32, kernel_size=3, padding='same', activation='relu'))  
model.add(Conv2D(filters=32, kernel_size=3, padding='same', activation='relu'))  
model.add(MaxPool2D(pool_size=2, strides=2))  
  
model.add(Conv2D(filters=64, kernel_size=3, padding='same', activation='relu'))  
model.add(Conv2D(filters=64, kernel_size=3, padding='same', activation='relu'))  
model.add(MaxPool2D(pool_size=2, strides=2))  

model.add(Conv2D(filters=128, kernel_size=3, padding='same', activation='relu'))  
model.add(Conv2D(filters=128, kernel_size=3, padding='same', activation='relu'))  
model.add(MaxPool2D(pool_size=2, strides=2))  

model.add(Flatten())  
model.add(Dense(64, activation='relu'))  
model.add(Dense(2, activation='relu'))  
   
adam = Adam(lr=1e-3)  
model.compile(optimizer=adam, loss='categorical_crossentropy', metrics=['accuracy'])  
  
train_datagen = ImageDataGenerator(  
    rotation_range=40,   
    width_shift_range=0.2,  
    height_shift_range=0.2,  
    rescale=1/255,  
    shear_range=0.2,  
    zoom_range=0.2,  
    horizontal_flip=True,  
    fill_mode='nearest'  
)  
test_datagen = ImageDataGenerator(rescale=1/255)  
  
batch_size = 32  
train_generate = train_datagen.flow_from_directory('train/', target_size=(150, 150), batch_size=batch_size)  
test_generate = train_datagen.flow_from_directory('Test/', target_size=(150, 150), batch_size=batch_size)  

train_generate.class_indices  
model.fit_generator(train_generate, steps_per_epoch=train_generate.batch_size, epochs=30, validation_data=test_generate,validation_steps=80)

model.save('model_cnn.h5')  
from keras.models import load_model  
import numpy as np  

label = np.array(['cat', 'dog'])  
model = load_model('model_cnn.h5')  
image = load_img('Test/cat/cat.360.jpg')  
image = image.resize((150, 150))  
image = img_to_array(image)  
image = image/255  
image = np.expanddims(image, 0)  
print(label[model.predict_classes(image)])  
